// <auto-generated />
using System;
using CalendarWebAPI.DbModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CalendarWebAPI.Migrations
{
    [DbContext(typeof(CalendarContext))]
    partial class CalendarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CalendarWebAPI.DbModels.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("Applications", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.ApplicationEvent", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ApplicationEvents", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Calendar", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.CalendarDate", b =>
                {
                    b.Property<int>("Has53ISOWeeks")
                        .HasColumnType("int");

                    b.Property<int>("Has53Weeks")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLeapYear")
                        .HasColumnType("bit");

                    b.Property<int>("IsWeekend")
                        .HasColumnType("int");

                    b.Property<string>("MMYYYY")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .IsFixedLength();

                    b.Property<string>("Style101")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Style103")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Style112")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Style120")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("TheDate")
                        .HasColumnType("date");

                    b.Property<int?>("TheDay")
                        .HasColumnType("int");

                    b.Property<string>("TheDayName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheDayOfWeek")
                        .HasColumnType("int");

                    b.Property<byte?>("TheDayOfWeekInMonth")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TheDayOfYear")
                        .HasColumnType("int");

                    b.Property<string>("TheDaySuffix")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime?>("TheFirstOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfWeek")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheFirstOfYear")
                        .HasColumnType("date");

                    b.Property<int?>("TheISOYear")
                        .HasColumnType("int");

                    b.Property<int?>("TheISOweek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TheLastOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheLastOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheLastOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheLastOfWeek")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TheLastOfYear")
                        .HasColumnType("date");

                    b.Property<int?>("TheMonth")
                        .HasColumnType("int");

                    b.Property<string>("TheMonthName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TheQuarter")
                        .HasColumnType("int");

                    b.Property<int?>("TheWeek")
                        .HasColumnType("int");

                    b.Property<byte?>("TheWeekOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TheYear")
                        .HasColumnType("int");

                    b.ToTable("CalendarDate", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.CalendarItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("GivenName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsHoliday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsMemorialday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsWeekendday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsWorkingday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarItems", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Confession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Confessions", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Creators", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Coefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValueSql("((1.0))");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("('Redovan rad')");

                    b.Property<Guid>("RecurringId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("RecurringId");

                    b.ToTable("Events", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ConfessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateDay")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("DateMonth")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .IsFixedLength();

                    b.Property<bool?>("IsCommon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsPermanent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ConfessionId");

                    b.ToTable("Holidays", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Adress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryOfResidence")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("RecordDtModified")
                        .HasColumnType("date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("People", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.PersonalIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PersonalIncomes", "Person");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Recurring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Gap")
                        .HasColumnType("int");

                    b.Property<string>("RecurringType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Separation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Recurrings", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Scheduler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("Schedulers", (string)null);
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.SchedulerItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CalendarItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SchedulerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CalendarItemsId");

                    b.HasIndex("SchedulerId");

                    b.ToTable("SchedulerItems", "Person");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CalendarItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .IsFixedLength();

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ShiftType")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(0)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarItemId");

                    b.ToTable("Shifts", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.TaxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(12,6)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("decimal(8,6)");

                    b.HasKey("Id");

                    b.ToTable("TaxGroups", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.TaxInTaxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("TaxGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxInTaxGroups", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Taxis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(12,6)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DateEnd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DateStart")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Percent")
                        .HasColumnType("decimal(8,6)");

                    b.HasKey("Id");

                    b.ToTable("Taxes", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.WorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsWorkingDay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays", "Catalog");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.ApplicationEvent", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Application", "Application")
                        .WithMany("ApplicationEvents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationEvent_Application");

                    b.HasOne("CalendarWebAPI.DbModels.Event", "Event")
                        .WithMany("ApplicationEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationEvent_Event");

                    b.Navigation("Application");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Calendar", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Creator", "Creator")
                        .WithMany("Calendars")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Calendar_Creators");

                    b.HasOne("CalendarWebAPI.DbModels.Calendar", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Calendar_Calendar");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.CalendarItem", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Calendar", "Calendar")
                        .WithMany("CalendarItems")
                        .HasForeignKey("CalendarId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendarItems_Calendar");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Event", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Recurring", "Recurring")
                        .WithMany("Events")
                        .HasForeignKey("RecurringId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Recurrings");

                    b.Navigation("Recurring");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Holiday", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Confession", "Confession")
                        .WithMany("Holidays")
                        .HasForeignKey("ConfessionId")
                        .HasConstraintName("FK_Holidays_Confessions");

                    b.Navigation("Confession");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Scheduler", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Event", "Event")
                        .WithMany("Schedulers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalendarWebAPI.DbModels.Person", "Person")
                        .WithMany("Schedulers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.SchedulerItem", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.CalendarItem", "CalendarItems")
                        .WithMany("SchedulerItems")
                        .HasForeignKey("CalendarItemsId")
                        .IsRequired()
                        .HasConstraintName("FK_SchedulerItems_CalendarItems");

                    b.HasOne("CalendarWebAPI.DbModels.Scheduler", "Scheduler")
                        .WithMany("SchedulerItems")
                        .HasForeignKey("SchedulerId")
                        .IsRequired()
                        .HasConstraintName("FK_SchedulerItems_Scheduler");

                    b.Navigation("CalendarItems");

                    b.Navigation("Scheduler");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Shift", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.CalendarItem", "CalendarItem")
                        .WithMany("Shifts")
                        .HasForeignKey("CalendarItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Shifts_CalendarItems");

                    b.Navigation("CalendarItem");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.TaxInTaxGroup", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.TaxGroup", "TaxGroup")
                        .WithMany("TaxInTaxGroups")
                        .HasForeignKey("TaxGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_TaxInTaxGroups_ToTaxGroups");

                    b.HasOne("CalendarWebAPI.DbModels.Taxis", "Tax")
                        .WithMany("TaxInTaxGroups")
                        .HasForeignKey("TaxId")
                        .IsRequired()
                        .HasConstraintName("FK_TaxInTaxGroups_ToTaxes");

                    b.Navigation("Tax");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.UserRole", b =>
                {
                    b.HasOne("CalendarWebAPI.DbModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("CalendarWebAPI.DbModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Application", b =>
                {
                    b.Navigation("ApplicationEvents");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Calendar", b =>
                {
                    b.Navigation("CalendarItems");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.CalendarItem", b =>
                {
                    b.Navigation("SchedulerItems");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Confession", b =>
                {
                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Creator", b =>
                {
                    b.Navigation("Calendars");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Event", b =>
                {
                    b.Navigation("ApplicationEvents");

                    b.Navigation("Schedulers");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Person", b =>
                {
                    b.Navigation("Schedulers");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Recurring", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Scheduler", b =>
                {
                    b.Navigation("SchedulerItems");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.TaxGroup", b =>
                {
                    b.Navigation("TaxInTaxGroups");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.Taxis", b =>
                {
                    b.Navigation("TaxInTaxGroups");
                });

            modelBuilder.Entity("CalendarWebAPI.DbModels.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
